/* ========= 1. –®–∞–±–ª–æ–Ω—ã PowerShell ========= */
const templates = [
  {
    pattern: /—Å–æ–∑–¥–∞—Ç—å vhdx (?<size>\d+(?:gb|mb)) –≤ (?<path>.+)/i,
    script: ({ size, path }) => `
# –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π VHDX
$vhdPath = "${path}\\VirtualDisk.vhdx"
New-VHD  -Path $vhdPath -SizeBytes ${size.toUpperCase()} -Dynamic
Mount-VHD -Path $vhdPath

$disk = (Get-Disk | ? IsOffline -eq $false | Select -Last 1)
Initialize-Disk -Number $disk.Number -PartitionStyle GPT
New-Partition -DiskNumber $disk.Number -UseMaximumSize -AssignDriveLetter |
  Format-Volume -FileSystem NTFS -NewFileSystemLabel "Data"`
  },

  {
    pattern: /–∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–∏—Å–∫ (?<letter>[a-z]): —Å –∫–ª—é—á–æ–º –≤ (?<keyPath>.+)/i,
    script: ({ letter, keyPath }) =>
      `Enable-BitLocker -MountPoint "${letter.toUpperCase()}:" -RecoveryKeyPath "${keyPath}" -EncryptionMethod XtsAes256`,
  },

  {
    pattern: /–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã/i,
    script: () => `Get-Process | Sort-Object CPU -desc | Select -First 25`,
  },

  {
    pattern: /—É–±–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å (?<name>\S+)/i,
    script: ({ name }) => `Stop-Process -Name "${name}" -Force`,
  },
];

const templateMatch = (q) => {
  for (const t of templates) {
    const m = q.match(t.pattern);
    if (m)
      return typeof t.script === "function"
        ? t.script(m.groups || {})
        : t.script;
  }
  return null;
};

/* ========= 2. –•—Ä–∞–Ω–∏–ª–∏—â–µ ========= */
let knowledgeBase = JSON.parse(localStorage.getItem("knowledgeBase") || "[]");
let corpus = JSON.parse(localStorage.getItem("corpus") || "[]");

const saveAll = () => {
  localStorage.setItem("knowledgeBase", JSON.stringify(knowledgeBase));
  localStorage.setItem("corpus", JSON.stringify(corpus));
};

/* ========= 3. –ù–µ–π—Ä–æ–Ω–Ω—ã–π —Å–ª–æ–π (Transformers.js) ========= */
let gpt = null;
async function loadModel() {
  if (gpt) return; // —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
  const { pipeline } = window.transformers;
  gpt = await pipeline("text-generation", "Xenova/gpt2-small", {
    quantized: true, // ~55 –ú–ë
  });
}

async function neuralScript(prompt) {
  await loadModel();
  const out = await gpt(prompt + "\n```powershell\n", {
    max_new_tokens: 120,
    temperature: 0.3,
    stop: ["```"],
  });
  const code = out[0].generated_text
    .split("```powershell")[1]
    ?.replace("```", "")
    ?.trim();
  return code;
}

/* ========= 4. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ========= */
const stopW = new Set(
  "–∏ –≤ –≤–æ –Ω–µ —á—Ç–æ –æ–Ω –Ω–∞ —è —Å —Å–æ –∫–∞–∫ –∞ —Ç–æ –≤—Å–µ –æ–Ω–∞ –Ω–æ –¥–∞ —Ç—ã –∫ —É –∂–µ –≤—ã –∑–∞ –±—ã –ø–æ —Ç–æ–ª—å–∫–æ –µ–µ –º–Ω–µ –±—ã–ª–æ –≤–æ—Ç –æ—Ç –º–µ–Ω—è –µ—â–µ –Ω–µ—Ç –æ –∏–∑ –µ–º—É —Ç–µ–ø–µ—Ä—å –∫–æ–≥–¥–∞ –¥–∞–∂–µ –Ω—É –≤–¥—Ä—É–≥ –ª–∏ –µ—Å–ª–∏ —É–∂–µ –∏–ª–∏ –Ω–∏ –±—ã—Ç—å –±—ã–ª –Ω–µ–≥–æ –¥–æ –≤–∞—Å –Ω–∏–±—É–¥—å —É–∂ –≤–∞–º –≤–µ–¥—å —Ç–∞–º –ø–æ—Ç–æ–º —Å–µ–±—è –Ω–∏—á–µ–≥–æ –µ–π –º–æ–∂–µ—Ç –æ–Ω–∏ —Ç—É—Ç –≥–¥–µ –µ—Å—Ç—å –Ω–∞–¥–æ –Ω–µ–π –¥–ª—è –º—ã —Ç–µ–±—è –∏—Ö —á–µ–º –±—ã–ª–∞ —Å–∞–º —á—Ç–æ–± –±–µ–∑ –±—É–¥—Ç–æ —á–µ–≥–æ —Ä–∞–∑ —Ç–æ–∂–µ —Å–µ–±–µ –ø–æ–¥ –±—É–¥–µ—Ç –∂ —Ç–æ–≥–¥–∞ –∫—Ç–æ —ç—Ç–æ—Ç —Ç–æ–≥–æ –ø–æ—Ç–æ–º—É —ç—Ç–æ–≥–æ –∫–∞–∫–æ–π —Å–æ–≤—Å–µ–º –Ω–∏–º –∑–¥–µ—Å—å —ç—Ç–æ–º –æ–¥–∏–Ω –ø–æ—á—Ç–∏ –º–æ–π —Ç–µ–º —á—Ç–æ–±—ã –Ω–µ–µ —Å–µ–π—á–∞—Å –±—ã–ª–∏ –∫—É–¥–∞ –∑–∞—á–µ–º"
    .split(" ")
    .filter(Boolean)
);

const sentences = (t) =>
  t
    .split(/[.!?\n]+/)
    .map((s) => s.trim())
    .filter(Boolean);

/* ========= 5. DOM —Å—Å—ã–ª–∫–∏ ========= */
const trainText = document.getElementById("trainText");
const trainURL = document.getElementById("trainURL");
const chat = document.getElementById("chat");
const userInput = document.getElementById("userInput");
const textInput = document.getElementById("textInput");
const urlInput = document.getElementById("urlInput");

/* ========= 6. UI helpers ========= */
function append(sender, text, cls) {
  const d = document.createElement("div");
  d.className = `msg ${cls}`;
  d.textContent = `${sender}: ${text}`;
  chat.appendChild(d);
  chat.scrollTop = chat.scrollHeight;
  return d; // –≤–µ—Ä–Ω—É—Ç—å DOM-—É–∑–µ–ª
}
function hideSections() {
  trainText.classList.add("hidden");
  trainURL.classList.add("hidden");
}
function showTrainText() {
  hideSections();
  trainText.classList.remove("hidden");
}
function showTrainURL() {
  hideSections();
  trainURL.classList.remove("hidden");
}
function clearChat() {
  chat.innerHTML = "";
}

/* ========= 7. Backup / Restore ========= */
function exportData() {
  const blob = new Blob([JSON.stringify({ knowledgeBase, corpus })], {
    type: "application/json",
  });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = "bot-memory.json";
  a.click();
  URL.revokeObjectURL(url);
}
function importData(e) {
  const f = e.target.files[0];
  if (!f) return;
  const r = new FileReader();
  r.onload = (ev) => {
    try {
      const d = JSON.parse(ev.target.result);
      if (Array.isArray(d.knowledgeBase) && Array.isArray(d.corpus)) {
        knowledgeBase = d.knowledgeBase;
        corpus = d.corpus;
        saveAll();
        append("–ò–ò", "–ü–∞–º—è—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", "bot");
      } else throw "format";
    } catch (err) {
      alert("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: " + err);
    }
  };
  r.readAsText(f);
}

/* ========= 8. –û–±—É—á–µ–Ω–∏–µ ========= */
function trainFromText() {
  const t = textInput.value.trim();
  if (!t) return alert("–¢–µ–∫—Å—Ç?");
  const s = sentences(t);
  s.forEach((x) => {
    knowledgeBase.push({ request: x.toLowerCase(), answer: x });
    corpus.push(x);
  });
  saveAll();
  append("–ò–ò", `–û–±—É—á–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${s.length}`, "bot");
}
async function trainFromURL() {
  const u = urlInput.value.trim();
  if (!u) return alert("URL?");
  try {
    const proxy = "https://api.allorigins.win/get?url=" + encodeURIComponent(u);
    const res = await fetch(proxy);
    const data = await res.json();
    const doc = new DOMParser().parseFromString(data.contents, "text/html");
    const text = [...doc.querySelectorAll("p")]
      .map((p) => p.textContent.trim())
      .join(" ");
    const s = sentences(text);
    s.forEach((x) => {
      knowledgeBase.push({ request: x.toLowerCase(), answer: x });
      corpus.push(x);
    });
    saveAll();
    append("–ò–ò", `–° URL –æ–±—É—á–µ–Ω–æ: ${s.length}`, "bot");
  } catch (e) {
    alert("–û—à–∏–±–∫–∞ URL: " + e.message);
  }
}

/* ========= 9. –ê–Ω–∞–ª–∏–∑ ========= */
function analysis() {
  if (!corpus.length) return "–ö–æ—Ä–ø—É—Å –ø—É—Å—Ç!";
  let total = 0,
    freq = {};
  corpus.forEach((s) =>
    s
      .toLowerCase()
      .split(/[^\p{L}0-9]+/u)
      .forEach((w) => {
        if (!w || stopW.has(w)) return;
        total++;
        freq[w] = (freq[w] || 0) + 1;
      })
  );
  const avg = (total / corpus.length).toFixed(1);
  const top = Object.entries(freq)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 10)
    .map(([w, c]) => `${w}(${c})`)
    .join(", ");
  return `–í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${corpus.length}\n–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: ${avg} —Å–ª–æ–≤\n–¢–æ–ø-10 —Å–ª–æ–≤: ${top}`;
}
function showAnalysis() {
  append("–ò–ò", analysis(), "bot");
  hideSections();
}

/* ========= 10. –û—Å–Ω–æ–≤–Ω–æ–π ask ========= */
const sim = (a, b) => {
  const w1 = a.split(/\s+/),
    w2 = b.split(/\s+/);
  return w1.filter((x) => w2.includes(x)).length / Math.max(w1.length, w2.length);
};
const kb = (q) => {
  let best = null,
    s = 0;
  knowledgeBase.forEach((e) => {
    const sc = sim(q, e.request);
    if (sc > s) {
      s = sc;
      best = e;
    }
  });
  return s > 0.35 ? best.answer : null;
};

async function ask() {
  const q = userInput.value.trim();
  if (!q) return;
  userInput.value = "";
  append("–¢—ã", q, "user");

  // 1. —à–∞–±–ª–æ–Ω—ã
  let ans = templateMatch(q.toLowerCase());

  // 2. –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
  if (!ans) ans = kb(q.toLowerCase());

  // 3. –Ω–µ–π—Ä–æ—Å–µ—Ç—å
  if (!ans) {
    const thinking = append("–ò–ò", "‚öôÔ∏è –î—É–º–∞—é‚Ä¶", "bot");
    ans = await neuralScript(`–ù–∞–ø–∏—à–∏ PowerShell-—Å–∫—Ä–∏–ø—Ç: ${q}`);
    thinking.textContent = `–ò–ò: ${ans || "ü§∑ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"}`;
    return;
  }

  append("–ò–ò", ans, "bot");
}

/* ========= 11. –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤ –≥–ª–æ–±–∞–ª (–¥–ª—è –∫–Ω–æ–ø–æ–∫) ========= */
window.showTrainText = showTrainText;
window.showTrainURL = showTrainURL;
window.showAnalysis = showAnalysis;
window.exportData = exportData;
window.importData = importData;
window.trainFromText = trainFromText;
window.trainFromURL = trainFromURL;
window.clearChat = clearChat;
window.ask = ask;
